import org.json.JSONException;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.StandardOpenOption;
import java.util.*;

public class VaultService {

    private static final String VAULT_URL = "";         // add your Vault URL
    private static final String VAULT_NAMESPACE = "";   // add your Vault namespace
    private static final String VAULT_NAME = "";        // add your Vault name

    private static final String ENV = System.getenv("env") != null ? System.getenv("env") : "";
    private static final String ROLE_ID = "";           // add your role_id
    private static final String SECRET_ID = "";         // add your secret_id

    private String vaultToken;
    private long expiresIn;
    private JSONObject pgData;
    private HttpURLConnection conn;

    private static Logger logger = LoggerFactory.getLogger(VaultService.class);

    // ðŸ”¹ Separate mappings
    Map<String, String> propertiesMappings = new HashMap<>();
    Map<String, String> yamlMappings = new HashMap<>();

    public static void main(String[] args) {
        VaultService vault = new VaultService();
        vault.getSecretsList();

        // ðŸ”¹ Initialize both sets of mappings
        vault.initiatePropertiesMapping();
        vault.initiateYamlMapping();

        // ðŸ”¹ Update both files
        vault.updatePropertiesFile();  // updates application.properties
        vault.updateYamlFile();        // updates application.yml

        System.out.println("âœ… application.properties and application.yml updated successfully");
    }

    // -------------------- SECRET FETCH ---------------------
    public JSONObject getSecretsList() {
        try {
            // Simulate fetching secrets from Vault
            // Replace this with your actual Vault call logic
            pgData = new JSONObject();
            pgData.put("Pg_user", "dbuser123");
            pgData.put("pg_pass", "dbpass123");
            pgData.put("client_id", "client123");
            pgData.put("client_secret", "secret123");

            return pgData;
        } catch (Exception e) {
            e.printStackTrace();
            logger.error("VAULT ERROR: Failed to retrieve secrets");
        }
        return null;
    }

    // -------------------- INIT MAPPINGS ---------------------
    private void initiatePropertiesMapping() {
        try {
            propertiesMappings.put("datasource_username", pgData.getString("Pg_user"));
            propertiesMappings.put("datasource_password", pgData.getString("pg_pass"));
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    private void initiateYamlMapping() {
        try {
            yamlMappings.put("client_id", pgData.getString("client_id"));
            yamlMappings.put("client_secret", pgData.getString("client_secret"));
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    // -------------------- UPDATE FILES ---------------------
    private void updatePropertiesFile() {
        File file = new File("src/main/resources/application.properties");
        updateFileWithMappings(file, propertiesMappings);
    }

    private void updateYamlFile() {
        File file = new File("src/main/resources/application.yml");
        updateFileWithMappings(file, yamlMappings);
    }

    // -------------------- COMMON HELPER ---------------------
    private void updateFileWithMappings(File file, Map<String, String> mappings) {
        try {
            List<String> newLines = new ArrayList<>();
            List<String> lines = Files.readAllLines(file.toPath());

            for (String line : lines) {
                String newLine = line;
                for (String key : mappings.keySet()) {
                    if (line.contains(key)) {
                        newLine = newLine.replaceAll(key, mappings.get(key));
                    }
                }
                newLines.add(newLine);
            }

            file.delete();
            Files.write(file.toPath(), newLines, StandardOpenOption.CREATE);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}